/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.oauthlogin.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.oauthlogin.model.OAuthConnection;
import com.liferay.oauthlogin.model.OAuthConnectionModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OAuthConnection service. Represents a row in the &quot;OAuthLogin_OAuthConnection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>OAuthConnectionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OAuthConnectionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OAuthConnectionImpl
 * @generated
 */
@ProviderType
public class OAuthConnectionModelImpl
	extends BaseModelImpl<OAuthConnection> implements OAuthConnectionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o auth connection model instance should use the <code>OAuthConnection</code> interface instead.
	 */
	public static final String TABLE_NAME = "OAuthLogin_OAuthConnection";

	public static final Object[][] TABLE_COLUMNS = {
		{"oAuthConnectionId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"enabled", Types.BOOLEAN},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"iconId", Types.BIGINT}, {"oAuthVersion", Types.INTEGER},
		{"key_", Types.VARCHAR}, {"secret", Types.VARCHAR},
		{"scope", Types.VARCHAR}, {"authorizeURL", Types.VARCHAR},
		{"accessTokenURL", Types.VARCHAR}, {"accessTokenVerb", Types.INTEGER},
		{"accessTokenExtractorType", Types.INTEGER},
		{"requestTokenURL", Types.VARCHAR}, {"requestTokenVerb", Types.INTEGER},
		{"signatureServiceType", Types.INTEGER}, {"redirectURL", Types.VARCHAR},
		{"socialAccountIdURL", Types.VARCHAR},
		{"socialAccountIdURLVerb", Types.INTEGER},
		{"socialAccountIdField", Types.VARCHAR},
		{"socialAccountIdType", Types.INTEGER},
		{"socialAccountIdScript", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("oAuthConnectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("enabled", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("iconId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("oAuthVersion", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secret", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scope", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizeURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accessTokenURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accessTokenVerb", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("accessTokenExtractorType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("requestTokenURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestTokenVerb", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("signatureServiceType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("redirectURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("socialAccountIdURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("socialAccountIdURLVerb", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("socialAccountIdField", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("socialAccountIdType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("socialAccountIdScript", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OAuthLogin_OAuthConnection (oAuthConnectionId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,enabled BOOLEAN,name VARCHAR(75) null,description VARCHAR(75) null,iconId LONG,oAuthVersion INTEGER,key_ VARCHAR(75) null,secret VARCHAR(75) null,scope VARCHAR(75) null,authorizeURL VARCHAR(75) null,accessTokenURL VARCHAR(75) null,accessTokenVerb INTEGER,accessTokenExtractorType INTEGER,requestTokenURL VARCHAR(75) null,requestTokenVerb INTEGER,signatureServiceType INTEGER,redirectURL VARCHAR(75) null,socialAccountIdURL VARCHAR(75) null,socialAccountIdURLVerb INTEGER,socialAccountIdField VARCHAR(75) null,socialAccountIdType INTEGER,socialAccountIdScript VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table OAuthLogin_OAuthConnection";

	public static final String ORDER_BY_JPQL =
		" ORDER BY oAuthConnection.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OAuthLogin_OAuthConnection.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.oauthlogin.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.liferay.oauthlogin.model.OAuthConnection"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.oauthlogin.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.liferay.oauthlogin.model.OAuthConnection"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.liferay.oauthlogin.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.liferay.oauthlogin.model.OAuthConnection"),
		true);

	public static final long ENABLED_COLUMN_BITMASK = 1L;

	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.oauthlogin.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.oauthlogin.model.OAuthConnection"));

	public OAuthConnectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _oAuthConnectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOAuthConnectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oAuthConnectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OAuthConnection.class;
	}

	@Override
	public String getModelClassName() {
		return OAuthConnection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OAuthConnection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OAuthConnection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OAuthConnection, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((OAuthConnection)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OAuthConnection, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OAuthConnection, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OAuthConnection)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OAuthConnection, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OAuthConnection, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, OAuthConnection>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			OAuthConnection.class.getClassLoader(), OAuthConnection.class,
			ModelWrapper.class);

		try {
			Constructor<OAuthConnection> constructor =
				(Constructor<OAuthConnection>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<OAuthConnection, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<OAuthConnection, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<OAuthConnection, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<OAuthConnection, Object>>();
		Map<String, BiConsumer<OAuthConnection, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<OAuthConnection, ?>>();

		attributeGetterFunctions.put(
			"oAuthConnectionId",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getOAuthConnectionId();
				}

			});
		attributeSetterBiConsumers.put(
			"oAuthConnectionId",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object oAuthConnectionId) {

					oAuthConnection.setOAuthConnectionId(
						(Long)oAuthConnectionId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object companyId) {

					oAuthConnection.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object userId) {

					oAuthConnection.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object createDate) {

					oAuthConnection.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object modifiedDate) {

					oAuthConnection.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"enabled",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getEnabled();
				}

			});
		attributeSetterBiConsumers.put(
			"enabled",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object enabled) {

					oAuthConnection.setEnabled((Boolean)enabled);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object name) {

					oAuthConnection.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object description) {

					oAuthConnection.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"iconId",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getIconId();
				}

			});
		attributeSetterBiConsumers.put(
			"iconId",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object iconId) {

					oAuthConnection.setIconId((Long)iconId);
				}

			});
		attributeGetterFunctions.put(
			"oAuthVersion",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getOAuthVersion();
				}

			});
		attributeSetterBiConsumers.put(
			"oAuthVersion",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object oAuthVersion) {

					oAuthConnection.setOAuthVersion((Integer)oAuthVersion);
				}

			});
		attributeGetterFunctions.put(
			"key",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getKey();
				}

			});
		attributeSetterBiConsumers.put(
			"key",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object key) {

					oAuthConnection.setKey((String)key);
				}

			});
		attributeGetterFunctions.put(
			"secret",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getSecret();
				}

			});
		attributeSetterBiConsumers.put(
			"secret",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object secret) {

					oAuthConnection.setSecret((String)secret);
				}

			});
		attributeGetterFunctions.put(
			"scope",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getScope();
				}

			});
		attributeSetterBiConsumers.put(
			"scope",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object scope) {

					oAuthConnection.setScope((String)scope);
				}

			});
		attributeGetterFunctions.put(
			"authorizeURL",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getAuthorizeURL();
				}

			});
		attributeSetterBiConsumers.put(
			"authorizeURL",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object authorizeURL) {

					oAuthConnection.setAuthorizeURL((String)authorizeURL);
				}

			});
		attributeGetterFunctions.put(
			"accessTokenURL",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getAccessTokenURL();
				}

			});
		attributeSetterBiConsumers.put(
			"accessTokenURL",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object accessTokenURL) {

					oAuthConnection.setAccessTokenURL((String)accessTokenURL);
				}

			});
		attributeGetterFunctions.put(
			"accessTokenVerb",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getAccessTokenVerb();
				}

			});
		attributeSetterBiConsumers.put(
			"accessTokenVerb",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object accessTokenVerb) {

					oAuthConnection.setAccessTokenVerb(
						(Integer)accessTokenVerb);
				}

			});
		attributeGetterFunctions.put(
			"accessTokenExtractorType",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getAccessTokenExtractorType();
				}

			});
		attributeSetterBiConsumers.put(
			"accessTokenExtractorType",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection,
					Object accessTokenExtractorType) {

					oAuthConnection.setAccessTokenExtractorType(
						(Integer)accessTokenExtractorType);
				}

			});
		attributeGetterFunctions.put(
			"requestTokenURL",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getRequestTokenURL();
				}

			});
		attributeSetterBiConsumers.put(
			"requestTokenURL",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object requestTokenURL) {

					oAuthConnection.setRequestTokenURL((String)requestTokenURL);
				}

			});
		attributeGetterFunctions.put(
			"requestTokenVerb",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getRequestTokenVerb();
				}

			});
		attributeSetterBiConsumers.put(
			"requestTokenVerb",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object requestTokenVerb) {

					oAuthConnection.setRequestTokenVerb(
						(Integer)requestTokenVerb);
				}

			});
		attributeGetterFunctions.put(
			"signatureServiceType",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getSignatureServiceType();
				}

			});
		attributeSetterBiConsumers.put(
			"signatureServiceType",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection,
					Object signatureServiceType) {

					oAuthConnection.setSignatureServiceType(
						(Integer)signatureServiceType);
				}

			});
		attributeGetterFunctions.put(
			"redirectURL",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getRedirectURL();
				}

			});
		attributeSetterBiConsumers.put(
			"redirectURL",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection, Object redirectURL) {

					oAuthConnection.setRedirectURL((String)redirectURL);
				}

			});
		attributeGetterFunctions.put(
			"socialAccountIdURL",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getSocialAccountIdURL();
				}

			});
		attributeSetterBiConsumers.put(
			"socialAccountIdURL",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection,
					Object socialAccountIdURL) {

					oAuthConnection.setSocialAccountIdURL(
						(String)socialAccountIdURL);
				}

			});
		attributeGetterFunctions.put(
			"socialAccountIdURLVerb",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getSocialAccountIdURLVerb();
				}

			});
		attributeSetterBiConsumers.put(
			"socialAccountIdURLVerb",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection,
					Object socialAccountIdURLVerb) {

					oAuthConnection.setSocialAccountIdURLVerb(
						(Integer)socialAccountIdURLVerb);
				}

			});
		attributeGetterFunctions.put(
			"socialAccountIdField",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getSocialAccountIdField();
				}

			});
		attributeSetterBiConsumers.put(
			"socialAccountIdField",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection,
					Object socialAccountIdField) {

					oAuthConnection.setSocialAccountIdField(
						(String)socialAccountIdField);
				}

			});
		attributeGetterFunctions.put(
			"socialAccountIdType",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getSocialAccountIdType();
				}

			});
		attributeSetterBiConsumers.put(
			"socialAccountIdType",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection,
					Object socialAccountIdType) {

					oAuthConnection.setSocialAccountIdType(
						(Integer)socialAccountIdType);
				}

			});
		attributeGetterFunctions.put(
			"socialAccountIdScript",
			new Function<OAuthConnection, Object>() {

				@Override
				public Object apply(OAuthConnection oAuthConnection) {
					return oAuthConnection.getSocialAccountIdScript();
				}

			});
		attributeSetterBiConsumers.put(
			"socialAccountIdScript",
			new BiConsumer<OAuthConnection, Object>() {

				@Override
				public void accept(
					OAuthConnection oAuthConnection,
					Object socialAccountIdScript) {

					oAuthConnection.setSocialAccountIdScript(
						(String)socialAccountIdScript);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getOAuthConnectionId() {
		return _oAuthConnectionId;
	}

	@Override
	public void setOAuthConnectionId(long oAuthConnectionId) {
		_oAuthConnectionId = oAuthConnectionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getEnabled() {
		return _enabled;
	}

	@Override
	public boolean isEnabled() {
		return _enabled;
	}

	@Override
	public void setEnabled(boolean enabled) {
		_columnBitmask |= ENABLED_COLUMN_BITMASK;

		if (!_setOriginalEnabled) {
			_setOriginalEnabled = true;

			_originalEnabled = _enabled;
		}

		_enabled = enabled;
	}

	public boolean getOriginalEnabled() {
		return _originalEnabled;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getIconId() {
		return _iconId;
	}

	@Override
	public void setIconId(long iconId) {
		_iconId = iconId;
	}

	@Override
	public int getOAuthVersion() {
		return _oAuthVersion;
	}

	@Override
	public void setOAuthVersion(int oAuthVersion) {
		_oAuthVersion = oAuthVersion;
	}

	@Override
	public String getKey() {
		if (_key == null) {
			return "";
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_key = key;
	}

	@Override
	public String getSecret() {
		if (_secret == null) {
			return "";
		}
		else {
			return _secret;
		}
	}

	@Override
	public void setSecret(String secret) {
		_secret = secret;
	}

	@Override
	public String getScope() {
		if (_scope == null) {
			return "";
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		_scope = scope;
	}

	@Override
	public String getAuthorizeURL() {
		if (_authorizeURL == null) {
			return "";
		}
		else {
			return _authorizeURL;
		}
	}

	@Override
	public void setAuthorizeURL(String authorizeURL) {
		_authorizeURL = authorizeURL;
	}

	@Override
	public String getAccessTokenURL() {
		if (_accessTokenURL == null) {
			return "";
		}
		else {
			return _accessTokenURL;
		}
	}

	@Override
	public void setAccessTokenURL(String accessTokenURL) {
		_accessTokenURL = accessTokenURL;
	}

	@Override
	public int getAccessTokenVerb() {
		return _accessTokenVerb;
	}

	@Override
	public void setAccessTokenVerb(int accessTokenVerb) {
		_accessTokenVerb = accessTokenVerb;
	}

	@Override
	public int getAccessTokenExtractorType() {
		return _accessTokenExtractorType;
	}

	@Override
	public void setAccessTokenExtractorType(int accessTokenExtractorType) {
		_accessTokenExtractorType = accessTokenExtractorType;
	}

	@Override
	public String getRequestTokenURL() {
		if (_requestTokenURL == null) {
			return "";
		}
		else {
			return _requestTokenURL;
		}
	}

	@Override
	public void setRequestTokenURL(String requestTokenURL) {
		_requestTokenURL = requestTokenURL;
	}

	@Override
	public int getRequestTokenVerb() {
		return _requestTokenVerb;
	}

	@Override
	public void setRequestTokenVerb(int requestTokenVerb) {
		_requestTokenVerb = requestTokenVerb;
	}

	@Override
	public int getSignatureServiceType() {
		return _signatureServiceType;
	}

	@Override
	public void setSignatureServiceType(int signatureServiceType) {
		_signatureServiceType = signatureServiceType;
	}

	@Override
	public String getRedirectURL() {
		if (_redirectURL == null) {
			return "";
		}
		else {
			return _redirectURL;
		}
	}

	@Override
	public void setRedirectURL(String redirectURL) {
		_redirectURL = redirectURL;
	}

	@Override
	public String getSocialAccountIdURL() {
		if (_socialAccountIdURL == null) {
			return "";
		}
		else {
			return _socialAccountIdURL;
		}
	}

	@Override
	public void setSocialAccountIdURL(String socialAccountIdURL) {
		_socialAccountIdURL = socialAccountIdURL;
	}

	@Override
	public int getSocialAccountIdURLVerb() {
		return _socialAccountIdURLVerb;
	}

	@Override
	public void setSocialAccountIdURLVerb(int socialAccountIdURLVerb) {
		_socialAccountIdURLVerb = socialAccountIdURLVerb;
	}

	@Override
	public String getSocialAccountIdField() {
		if (_socialAccountIdField == null) {
			return "";
		}
		else {
			return _socialAccountIdField;
		}
	}

	@Override
	public void setSocialAccountIdField(String socialAccountIdField) {
		_socialAccountIdField = socialAccountIdField;
	}

	@Override
	public int getSocialAccountIdType() {
		return _socialAccountIdType;
	}

	@Override
	public void setSocialAccountIdType(int socialAccountIdType) {
		_socialAccountIdType = socialAccountIdType;
	}

	@Override
	public String getSocialAccountIdScript() {
		if (_socialAccountIdScript == null) {
			return "";
		}
		else {
			return _socialAccountIdScript;
		}
	}

	@Override
	public void setSocialAccountIdScript(String socialAccountIdScript) {
		_socialAccountIdScript = socialAccountIdScript;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OAuthConnection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OAuthConnection toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OAuthConnection>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OAuthConnectionImpl oAuthConnectionImpl = new OAuthConnectionImpl();

		oAuthConnectionImpl.setOAuthConnectionId(getOAuthConnectionId());
		oAuthConnectionImpl.setCompanyId(getCompanyId());
		oAuthConnectionImpl.setUserId(getUserId());
		oAuthConnectionImpl.setCreateDate(getCreateDate());
		oAuthConnectionImpl.setModifiedDate(getModifiedDate());
		oAuthConnectionImpl.setEnabled(isEnabled());
		oAuthConnectionImpl.setName(getName());
		oAuthConnectionImpl.setDescription(getDescription());
		oAuthConnectionImpl.setIconId(getIconId());
		oAuthConnectionImpl.setOAuthVersion(getOAuthVersion());
		oAuthConnectionImpl.setKey(getKey());
		oAuthConnectionImpl.setSecret(getSecret());
		oAuthConnectionImpl.setScope(getScope());
		oAuthConnectionImpl.setAuthorizeURL(getAuthorizeURL());
		oAuthConnectionImpl.setAccessTokenURL(getAccessTokenURL());
		oAuthConnectionImpl.setAccessTokenVerb(getAccessTokenVerb());
		oAuthConnectionImpl.setAccessTokenExtractorType(
			getAccessTokenExtractorType());
		oAuthConnectionImpl.setRequestTokenURL(getRequestTokenURL());
		oAuthConnectionImpl.setRequestTokenVerb(getRequestTokenVerb());
		oAuthConnectionImpl.setSignatureServiceType(getSignatureServiceType());
		oAuthConnectionImpl.setRedirectURL(getRedirectURL());
		oAuthConnectionImpl.setSocialAccountIdURL(getSocialAccountIdURL());
		oAuthConnectionImpl.setSocialAccountIdURLVerb(
			getSocialAccountIdURLVerb());
		oAuthConnectionImpl.setSocialAccountIdField(getSocialAccountIdField());
		oAuthConnectionImpl.setSocialAccountIdType(getSocialAccountIdType());
		oAuthConnectionImpl.setSocialAccountIdScript(
			getSocialAccountIdScript());

		oAuthConnectionImpl.resetOriginalValues();

		return oAuthConnectionImpl;
	}

	@Override
	public int compareTo(OAuthConnection oAuthConnection) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), oAuthConnection.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OAuthConnection)) {
			return false;
		}

		OAuthConnection oAuthConnection = (OAuthConnection)obj;

		long primaryKey = oAuthConnection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		OAuthConnectionModelImpl oAuthConnectionModelImpl = this;

		oAuthConnectionModelImpl._setModifiedDate = false;

		oAuthConnectionModelImpl._originalEnabled =
			oAuthConnectionModelImpl._enabled;

		oAuthConnectionModelImpl._setOriginalEnabled = false;

		oAuthConnectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OAuthConnection> toCacheModel() {
		OAuthConnectionCacheModel oAuthConnectionCacheModel =
			new OAuthConnectionCacheModel();

		oAuthConnectionCacheModel.oAuthConnectionId = getOAuthConnectionId();

		oAuthConnectionCacheModel.companyId = getCompanyId();

		oAuthConnectionCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			oAuthConnectionCacheModel.createDate = createDate.getTime();
		}
		else {
			oAuthConnectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			oAuthConnectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			oAuthConnectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		oAuthConnectionCacheModel.enabled = isEnabled();

		oAuthConnectionCacheModel.name = getName();

		String name = oAuthConnectionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			oAuthConnectionCacheModel.name = null;
		}

		oAuthConnectionCacheModel.description = getDescription();

		String description = oAuthConnectionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			oAuthConnectionCacheModel.description = null;
		}

		oAuthConnectionCacheModel.iconId = getIconId();

		oAuthConnectionCacheModel.oAuthVersion = getOAuthVersion();

		oAuthConnectionCacheModel.key = getKey();

		String key = oAuthConnectionCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			oAuthConnectionCacheModel.key = null;
		}

		oAuthConnectionCacheModel.secret = getSecret();

		String secret = oAuthConnectionCacheModel.secret;

		if ((secret != null) && (secret.length() == 0)) {
			oAuthConnectionCacheModel.secret = null;
		}

		oAuthConnectionCacheModel.scope = getScope();

		String scope = oAuthConnectionCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			oAuthConnectionCacheModel.scope = null;
		}

		oAuthConnectionCacheModel.authorizeURL = getAuthorizeURL();

		String authorizeURL = oAuthConnectionCacheModel.authorizeURL;

		if ((authorizeURL != null) && (authorizeURL.length() == 0)) {
			oAuthConnectionCacheModel.authorizeURL = null;
		}

		oAuthConnectionCacheModel.accessTokenURL = getAccessTokenURL();

		String accessTokenURL = oAuthConnectionCacheModel.accessTokenURL;

		if ((accessTokenURL != null) && (accessTokenURL.length() == 0)) {
			oAuthConnectionCacheModel.accessTokenURL = null;
		}

		oAuthConnectionCacheModel.accessTokenVerb = getAccessTokenVerb();

		oAuthConnectionCacheModel.accessTokenExtractorType =
			getAccessTokenExtractorType();

		oAuthConnectionCacheModel.requestTokenURL = getRequestTokenURL();

		String requestTokenURL = oAuthConnectionCacheModel.requestTokenURL;

		if ((requestTokenURL != null) && (requestTokenURL.length() == 0)) {
			oAuthConnectionCacheModel.requestTokenURL = null;
		}

		oAuthConnectionCacheModel.requestTokenVerb = getRequestTokenVerb();

		oAuthConnectionCacheModel.signatureServiceType =
			getSignatureServiceType();

		oAuthConnectionCacheModel.redirectURL = getRedirectURL();

		String redirectURL = oAuthConnectionCacheModel.redirectURL;

		if ((redirectURL != null) && (redirectURL.length() == 0)) {
			oAuthConnectionCacheModel.redirectURL = null;
		}

		oAuthConnectionCacheModel.socialAccountIdURL = getSocialAccountIdURL();

		String socialAccountIdURL =
			oAuthConnectionCacheModel.socialAccountIdURL;

		if ((socialAccountIdURL != null) &&
			(socialAccountIdURL.length() == 0)) {

			oAuthConnectionCacheModel.socialAccountIdURL = null;
		}

		oAuthConnectionCacheModel.socialAccountIdURLVerb =
			getSocialAccountIdURLVerb();

		oAuthConnectionCacheModel.socialAccountIdField =
			getSocialAccountIdField();

		String socialAccountIdField =
			oAuthConnectionCacheModel.socialAccountIdField;

		if ((socialAccountIdField != null) &&
			(socialAccountIdField.length() == 0)) {

			oAuthConnectionCacheModel.socialAccountIdField = null;
		}

		oAuthConnectionCacheModel.socialAccountIdType =
			getSocialAccountIdType();

		oAuthConnectionCacheModel.socialAccountIdScript =
			getSocialAccountIdScript();

		String socialAccountIdScript =
			oAuthConnectionCacheModel.socialAccountIdScript;

		if ((socialAccountIdScript != null) &&
			(socialAccountIdScript.length() == 0)) {

			oAuthConnectionCacheModel.socialAccountIdScript = null;
		}

		return oAuthConnectionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OAuthConnection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OAuthConnection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OAuthConnection, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((OAuthConnection)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<OAuthConnection, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<OAuthConnection, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OAuthConnection, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((OAuthConnection)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OAuthConnection>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _oAuthConnectionId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _enabled;
	private boolean _originalEnabled;
	private boolean _setOriginalEnabled;
	private String _name;
	private String _description;
	private long _iconId;
	private int _oAuthVersion;
	private String _key;
	private String _secret;
	private String _scope;
	private String _authorizeURL;
	private String _accessTokenURL;
	private int _accessTokenVerb;
	private int _accessTokenExtractorType;
	private String _requestTokenURL;
	private int _requestTokenVerb;
	private int _signatureServiceType;
	private String _redirectURL;
	private String _socialAccountIdURL;
	private int _socialAccountIdURLVerb;
	private String _socialAccountIdField;
	private int _socialAccountIdType;
	private String _socialAccountIdScript;
	private long _columnBitmask;
	private OAuthConnection _escapedModel;

}